metadata:
  name: "DXNN Spot Instance - Production"
  description: "Production DXNN with spot interruption handling and optimized settings"
  version: "1.0"

aws:
  instance_type: "t2.medium"      # "c7i.4xlarge", "c5.large", "t3.medium", "t2.medium", "m5.large"
  market_type: "spot"
  spot_max_price: "0.38"
  region: "us-east-1"
  availability_zone: "us-east-1a"
  ami_id: "ami-020cba7c55df1f615"
  ssh_user: "ubuntu"
  iam_instance_profile: "DXNN-Spot-Profile"

spot_handling:
  enabled: true
  checkpoint_deadline_seconds: 60
  poll_interval_seconds: 4
  s3_bucket: "dxnn-checkpoints"
  s3_prefix: "dxnn-prod"
  job_id: "dxnn-prod-training-001"
  container_name: "dxnn-app"
  erlang_node: "dxnn@127.0.0.1"
  erlang_cookie_file: "/var/lib/dxnn/.erlang.cookie"
  restore_from_s3_on_boot: true
  use_rebalance_recommendation: false

application:
  type: "dxnn-spot"
  setup_commands:
    - "apt-get update -y"
    - "apt-get install -y erlang git vim htop tree build-essential tmux chrony jq openssl unzip"
    - "systemctl enable chrony && systemctl start chrony"
    - "chronyc sources -v"
    - "curl -L https://github.com/mikefarah/yq/releases/download/v4.35.1/yq_linux_amd64 -o /usr/local/bin/yq && chmod +x /usr/local/bin/yq"
    - "mkdir -p /var/lib/dxnn/checkpoints /var/log /run"
    - "chown -R ubuntu:ubuntu /var/lib/dxnn"
    - "chmod 755 /var/lib/dxnn/checkpoints"
    - "echo 'vm.swappiness=10' >> /etc/sysctl.conf"
    - "echo 'net.core.rmem_max=134217728' >> /etc/sysctl.conf"
    - "echo 'net.core.wmem_max=134217728' >> /etc/sysctl.conf"
    - "sysctl -p"
    - |
      cat > /etc/logrotate.d/spot-watch << 'EOF'
      /var/log/spot-watch.log {
          daily
          rotate 7
          compress
          delaycompress
          missingok
          notifempty
          create 644 root root
      }
      EOF
    - |
      set -e
      cd /home/ubuntu
      git clone https://github.com/qendro/DXNN-Trader-v2.git dxnn-trader
      chown -R ubuntu:ubuntu /home/ubuntu/dxnn-trader
      echo "dxnn_prod_$(openssl rand -hex 16)" > /var/lib/dxnn/.erlang.cookie
      chown ubuntu:ubuntu /var/lib/dxnn/.erlang.cookie
      chmod 600 /var/lib/dxnn/.erlang.cookie
      if [[ -f /tmp/finalize_run.sh ]]; then
        cp /tmp/finalize_run.sh /usr/local/bin/finalize_run.sh
      fi
      if [[ -f /tmp/dxnn-wrapper.sh ]]; then
        cp /tmp/dxnn-wrapper.sh /usr/local/bin/dxnn-wrapper.sh
      fi
      if [[ -f /tmp/restore-from-s3.sh ]]; then
        cp /tmp/restore-from-s3.sh /usr/local/bin/restore-from-s3.sh
      fi

    - "chmod +x /usr/local/bin/finalize_run.sh /usr/local/bin/dxnn-wrapper.sh /usr/local/bin/restore-from-s3.sh 2>/dev/null || true"
    - |
      set -e
      tmpdir=$(mktemp -d)
      arch=$(uname -m)
      if [[ "$arch" == "x86_64" || "$arch" == "amd64" ]]; then
        cli_url="https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"
      else
        cli_url="https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip"
      fi
      curl -Ls "$cli_url" -o "$tmpdir/awscliv2.zip"
      unzip -q "$tmpdir/awscliv2.zip" -d "$tmpdir"
      "$tmpdir/aws/install" --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update
      rm -rf "$tmpdir"
    - |
      touch /var/log/dxnn-run.log
      chown ubuntu:ubuntu /var/log/dxnn-run.log
      chmod 644 /var/log/dxnn-run.log

      # Wait for /home/ubuntu/SCRIPTS_READY trigger file (created after SCP upload)
      for attempt in {1..60}; do
        if [[ -f /home/ubuntu/SCRIPTS_READY ]]; then
          echo "SCRIPTS_READY file detected, proceeding with autostart" >> /var/log/dxnn-setup.log
          break
        fi
        echo "waiting for SCRIPTS_READY (attempt $attempt)" >> /var/log/dxnn-setup.log
        sleep 5
      done

      if [[ -f /home/ubuntu/SCRIPTS_READY ]]; then
        if [[ -x /usr/local/bin/restore-from-s3.sh ]]; then
          RESTORE_S3_BUCKET="dxnn-checkpoints" \
          RESTORE_S3_PREFIX="dxnn-prod" \
          RESTORE_JOB_ID="dxnn-prod-training-001" \
          RESTORE_DXNN_DIR="/home/ubuntu/dxnn-trader" \
          /usr/local/bin/restore-from-s3.sh >> /var/log/dxnn-restore.log 2>&1 || echo "restore-from-s3 failed" >> /var/log/dxnn-setup.log
        else
          echo "restore-from-s3.sh not present" >> /var/log/dxnn-setup.log
        fi

        su - ubuntu -c '
          export S3_BUCKET="dxnn-checkpoints"
          export S3_PREFIX="dxnn-prod"
          export JOB_ID="dxnn-prod-training-001"
          export RUN_ID="$(date -u +%Y%m%d-%H%M%SZ)"
          /usr/local/bin/dxnn-wrapper.sh
        '
      else
        echo "SCRIPTS_READY not detected after wait; skipping autostart" >> /var/log/dxnn-setup.log
      fi
    
    # Health check endpoint (simple HTTP server for monitoring)
    - |
      cat > /usr/local/bin/health-check.sh << 'HEALTH_EOF'
      #!/bin/bash
      # Simple health check for DXNN application
      if tmux has-session -t trader 2>/dev/null; then
          echo "OK: DXNN trader session active"
          exit 0
      else
          echo "ERROR: DXNN trader session not found"
          exit 1
      fi
      HEALTH_EOF
      chmod +x /usr/local/bin/health-check.sh

networking:
  ports:
    - 22    # SSH
    - 4369  # Erlang Port Mapper Daemon
    - 9100  # Monitoring (if needed)

# Production-specific tags
tags:
  Project: "DXNN-Spot"
  Environment: "Production"
  JobId: "dxnn-prod-training-001"
  Owner: "DXNN-Team"
  CostCenter: "Trading"
  Backup: "Enabled"
  Monitoring: "Required"

# Production monitoring and alerting (for future implementation)
monitoring:
  enabled: true
  metrics:
    - "spot_interruptions"
    - "checkpoint_frequency"
    - "s3_upload_success_rate"
    - "restore_success_rate"
    - "trading_performance"
  
alerts:
    - "spot_interruption_detected"
    - "checkpoint_failed"
    - "s3_upload_failed"
    - "application_crashed"
